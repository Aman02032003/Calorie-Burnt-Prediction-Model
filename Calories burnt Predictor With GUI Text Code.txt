import pandas as pd
import numpy as np
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler,OrdinalEncoder
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor

def read_csv(file_path):
    return pd.read_csv(file_path)

import os
os.getcwd()  **** file location ka pta lagne par csv file ko whi paste kar denge. nhi to        directory change kar denge. **** 
os.chdir('D:\\Users\\abhik\\Jupytor Notebook\\Calories-Burnt-Prediction-using-Machine-Learning-main\\Calories-Burnt-Prediction-using-Machine-Learning-main')

c = read_csv('calories.csv')
e = read_csv('exercise.csv')

def dataset_info_statistics(data):
    print("Dataset Information")
    print(data.info())
    print("\n")
    
    print("Basic Statistics for numerical column:")
    print(data.describe())
    print("\n")

c.head(1)

e.head(1)

data = pd.merge(c,e,on='User_ID')

data.head()

dataset_info_statistics(data)

def check_null(data):
    null_counts = data.isnull().sum()
    print("Null Value in the dataset:")
    return null_counts

 check_null(data)

def check_duplicates(data):
    
    return data.duplicated().any()

check_duplicates(data)

def plot_graph(data):
    
    num_columns = data.select_dtypes(include=np.number).columns
    for column in num_columns:
        plt.figure(figsize=(5,3))
        sns.displot(data[column],kde=True)
        plt.title(f"Histogram for {column}")
        plt.xlabel(column)
        plt.ylabel("Frequency")
        plt.show()
        
plot_graph(data)

sns.countplot(x="Gender", data = data)

def sep_features_target(data,target_column):
    X = data.drop(columns=[target_column],axis=1)
    y = data[target_column]
    
    return X,y

data.columns

X,y = sep_features_target(data,'Calories')

X.head()

y.head()

X = X.drop(columns=['User_ID'],axis=1)

X

def perform_train_test_split(X,y,test_size=0.20,random_state=42):
    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=test_size,random_state=random_state)
    return X_train,X_test,y_train,y_test 

X_train,X_test,y_train,y_test = perform_train_test_split(X,y,test_size=0.20,random_state=42)

X_train

X.shape

X_train.shape

X_test.shape

data.columns

preprocessor = ColumnTransformer(transformers=[
    ('ordinal',OrdinalEncoder(),['Gender']),
    ('num',StandardScaler(),['Age',
                            'Height',
                            'Weight',
                            'Duration',
                            'Heart_Rate',
                            'Body_Temp']),
],remainder='passthrough')

pipeline = Pipeline([("preprocessor",preprocessor),
                     ("model",LinearRegression())
                    ])

from sklearn import set_config

set_config(display='diagram')

pipeline

pipeline.fit(X_train,y_train)

y_pred = pipeline.predict(X_test)

from sklearn.metrics import r2_score

r2_score(y_test,y_pred)

from sklearn.model_selection import KFold

kfold = KFold(n_splits=5, shuffle=True, random_state=42)

from sklearn.model_selection import cross_val_score

cv_results = cross_val_score(pipeline, X, y, cv=kfold, scoring='r2')

cv_results.mean()

from sklearn.metrics import mean_absolute_error

mean_absolute_error(y_test,y_pred)

def model_scorer(model_name,model):
    
    output=[]
   
    
    output.append(model_name)
    
    pipeline = Pipeline([
    ('preprocessor',preprocessor),
    ('model',model)])
    
    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=42)
    
    pipeline.fit(X_train,y_train)
    
    y_pred = pipeline.predict(X_test)
    
    output.append(r2_score(y_test,y_pred))
    output.append(mean_absolute_error(y_test,y_pred))
    
    kfold = KFold(n_splits=5, shuffle=True, random_state=42)
    cv_results = cross_val_score(pipeline, X, y, cv=kfold, scoring='r2')
    output.append(cv_results.mean())
    return output


model_dict={
    'log':LinearRegression(),
    'RF':RandomForestRegressor(),
    'XGBR':XGBRegressor(),
}

model_output

preprocessor = ColumnTransformer(transformers=[
    ('ordinal',OrdinalEncoder(),['Gender']),
    ('num',StandardScaler(),['Age',
                            'Height',
                            'Weight',
                            'Duration',
                            'Heart_Rate',
                            'Body_Temp']),
    
],remainder='passthrough')

pipeline = Pipeline([
    ('preprocessor',preprocessor),
    ('model',XGBRegressor())
    
])

pipeline.fit(X,y)

sample = pd.DataFrame({
   'Gender':'male',
    'Age':68,
    'Height':190.0,
    'Weight':94.0,
    'Duration':29.0,
    'Heart_Rate':105.0,
    'Body_Temp':40.8,
},index=[0])

pipeline.predict(sample)

import pickle

with open('pipeline.pkl','wb') as f:
    pickle.dump(pipeline,f)
with open('pipeline.pkl','rb') as f:
    pipeline_saved = pickle.load(f)
result = pipeline_saved.predict(sample)

result


****GUI****

import pickle
import pandas as pd
from tkinter import *
from tkinter import ttk

def show_entry():
    with open('pipeline.pkl','rb') as f:
        pipeline = pickle.load(f)

    p1 = clicked.get()
    p2 = float(e2.get())
    p3 = float(e3.get())
    p4 = float(e4.get())
    p5 = float(e5.get())
    p6 = float(e6.get())
    p7 = float(e7.get())

    sample = pd.DataFrame({
        'Gender': [p1],
        'Age': [p2],
        'Height': [p3],
        'Weight': [p4],
        'Duration': [p5],
        'Heart_Rate': [p6],
        'Body_Temp': [p7],
    }, index=[0])

    result = pipeline.predict(sample)
    result_label.config(text=f"Calories Burnt: {result[0]:.2f}")

# Set up the main application window
master = Tk()
master.title("Calories Burnt Prediction using Machine Learning")
master.geometry("500x500")
master.configure(bg='lightblue')

# Title Label
title_label = Label(master, text="Calories Burnt Prediction", bg="black", fg="white",
                    font=("Arial", 16), pady=10)
title_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20)

# Labels and Entry Widgets
labels = ["Select Gender", "Enter Your Age", "Enter Your Height (cm)", "Enter Your Weight (kg)", 
          "Duration (min)", "Heart Rate (bpm)", "Body Temp (Â°C)"]
entries = []

for i, text in enumerate(labels):
    Label(master, text=text, bg="lightblue", font=("Arial", 12)).grid(row=i+1, column=0, sticky=W, padx=20, pady=5)
    if i == 0:  # Dropdown for gender
        clicked = StringVar(value="male")
        e = ttk.Combobox(master, textvariable=clicked, values=["male", "female"], width=17)
    else:  # Entry fields
        e = Entry(master, width=20)
    e.grid(row=i+1, column=1, padx=20, pady=5)
    entries.append(e)

e2, e3, e4, e5, e6, e7 = entries[1:]

# Prediction Button
predict_button = Button(master, text="Predict", command=show_entry, bg="green", fg="white",
                        font=("Arial", 12), padx=10, pady=5)
predict_button.grid(row=8, column=0, columnspan=2, pady=20)

# Result Label
result_label = Label(master, text="", bg="lightblue", font=("Arial", 14))
result_label.grid(row=9, column=0, columnspan=2)

# Run the application
mainloop()
